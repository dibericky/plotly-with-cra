{"version":3,"sources":["index.js"],"names":["xField","yField","prepData","rawData","x","y","textList","forEach","datum","i","push","Date","concat","Min_TemperatureC","Max_TemperatureC","marker","color","hoveron","mode","text","fillcolor","App","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","react_plotly_js__WEBPACK_IMPORTED_MODULE_7___default","onClick","e","console","log","onRelayout","data","layout","title","xaxis","rangeslider","thickness","bgcolor","zeroline","showgrid","yaxis","fixedrange","showlegend","hoverlabel","bordercolor","font","family","size","config","displayModeBar","React","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"mOAQIA,SAAS,QACTC,EAAS,oBAqCb,SAASC,EAASC,GACd,IAAIC,EAAI,GACJC,EAAI,GACJC,EAAW,GASf,OAPAH,EAAQI,QAAQ,SAASC,EAAOC,GAE5BL,EAAEM,KAAK,IAAIC,KAAKH,EAAMR,KACtBK,EAAEK,KAAKF,EAAMP,IACbK,EAASI,KAAT,QAAAE,OAAsBJ,EAAMK,iBAA5B,WAAAD,OAAsDJ,EAAMM,qBAGzD,CAAC,CACJC,OAAQ,CACJC,MAAO,WAEXC,QAAS,eACTC,KAAM,QACNC,KAAMb,EACNc,UAAW,OACXhB,EAAGA,EACHC,EAAGA,QAGLgB,mLAEF,OACEC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAEEG,QAAS,SAAAC,GAAC,OAAIC,QAAQC,IAAI,aAAcF,IACxCG,WAAY,SAAAH,GAAC,OAAIC,QAAQC,IAAI,oBAAqBF,IAClDI,KAAM7B,EAASC,GACf6B,OAAQ,CACNC,MAAO,8CACPC,MAAO,CACHC,YAAa,CACTC,UAAW,GACXC,QAAS,WAEbC,UAAU,EACVC,UAAU,GAEdC,MAAO,CACHC,YAAY,EACZH,UAAU,GAEdI,YAAY,EACZC,WAAY,CACVN,QAAS,UACTO,YAAa,OACbC,KAAM,CACJ7B,MAAO,OACP8B,OAAQ,YACRC,KAAM,MAIdC,OAAQ,CAACC,gBAAgB,YAjCbC,IAAMC,WAuClBC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAOlC,EAAAC,EAAAC,cAACH,EAAD,MAAS+B","file":"static/js/main.01a5cdfc.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Plot from \"react-plotly.js\";\n\nimport rawData from './data.json'\n\nimport \"./styles.css\";\n\nvar xField = 'Date';\nvar yField = 'Mean_TemperatureC';\n\nvar selectorOptions = {\n    buttons: [{\n        step: 'month',\n        stepmode: 'backward',\n        count: 1,\n        label: '1m'\n    }, {\n        step: 'month',\n        stepmode: 'backward',\n        count: 6,\n        label: '6m'\n    }, {\n        step: 'year',\n        stepmode: 'todate',\n        count: 1,\n        label: 'YTD'\n    }, {\n        step: 'year',\n        stepmode: 'backward',\n        count: 1,\n        label: '1y'\n    }, {\n        step: 'all',\n    }],\n};\n/*\nPlotly.d3.csv(rawDataURL, function(err, rawData) {\n    if(err) throw err;\n\n    var data = \n    var layout = ;\n\n    Plotly.plot('graph', data, layout);\n});*/\n\nfunction prepData(rawData) {\n    var x = [];\n    var y = [];\n    var textList = []\n\n    rawData.forEach(function(datum, i) {\n\n        x.push(new Date(datum[xField]));\n        y.push(datum[yField]);\n        textList.push(`Min: ${datum.Min_TemperatureC}, Max: ${datum.Max_TemperatureC}`)\n    });\n\n    return [{\n        marker: {\n            color: '#178CF8'\n        },\n        hoveron: 'points+fills',\n        mode: 'lines',\n        text: textList,\n        fillcolor: '#000',\n        x: x,\n        y: y\n    }];\n}\nclass App extends React.Component {\n  render() {\n    return (\n      <Plot\n        // ref: https://github.com/plotly/react-plotly.js/blob/master/README.md#event-handler-props\n        onClick={e => console.log('Clicked on', e)}\n        onRelayout={e => console.log('Slider is changed', e)}\n        data={prepData(rawData)}\n        layout={{\n          title: 'Time series with range slider and selectors',\n          xaxis: {\n              rangeslider: {\n                  thickness: 0.2,\n                  bgcolor: '#F0F3F9'\n              },\n              zeroline: false,\n              showgrid: false\n          },\n          yaxis: {\n              fixedrange: true,\n              zeroline: false\n          },\n          showlegend: false,\n          hoverlabel: {\n            bgcolor: '#fafafa',\n            bordercolor: '#888',\n            font: {\n              color: '#222',\n              family: 'Open Sans',\n              size: 16\n            }\n            }\n        }}\n      config={{displayModeBar: false}}\n      />\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}